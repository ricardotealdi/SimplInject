h1. SimplInject

p. A simple dependency injection for .NET that uses "Ninject":https://github.com/ninject/ninject on background

h2. Usage

h3. Registering by Hand

bc.. SimplInjectRepository.RegisterType(typeof(IInterface), typeof(Concretelass));

p. or

bc.. SimplInjectRepository.RegisterType<IInterface, Concretelass>();

h3. Registering all SimplInjectAttribute types from an assembly

h4. Adding SimplInjectAttribute into your injectable class

bc.. [SimplInject]
public class ConcreteClass : IAmAnInterface {}

p. That attribute will make the class to be resolved by its interface.

h4. Loading assembly and registering types

bc.. SimplInjectRepository.InjectTypesFrom("Your.Assembly.Name.To.Be.Loaded");

h3. Resolving a type

bc.. var myInstance = SimplInjectRepository.Get<ClassWithDependeciesResolved>();

h2. Using with a newer Ninject version

p. You can try using assembly binding redirection on your app.config

bc.. <runtime>
	<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
		<dependentAssembly>
		<assemblyIdentity name="Ninject"
							publicKeyToken="c7192dc5380945e7"
							culture="neutral" />
		<bindingRedirect oldVersion="2.0.0.0"
							newVersion="{newer-version}"/>
		</dependentAssembly>
	</assemblyBinding>
</runtime>